diff --git a/lib/module/layoutReanimation/web/animationParser.js b/lib/module/layoutReanimation/web/animationParser.js
index 6b34c1ebdd35dbb88e1d5374daeb5ff27f6e4976..4277e04bcf4ce2c49229f7dc878e1a0292b40cd8 100644
--- a/lib/module/layoutReanimation/web/animationParser.js
+++ b/lib/module/layoutReanimation/web/animationParser.js
@@ -3,18 +3,27 @@
 import { WebEasings } from "./Easing.web.js";
 export function convertAnimationObjectToKeyframes(animationObject) {
   let keyframe = `@keyframes ${animationObject.name} { `;
-  for (const [timestamp, style] of Object.entries(animationObject.style)) {
-    const step = timestamp === 'from' ? 0 : timestamp === 'to' ? 100 : timestamp;
+  const steps = Object.entries(animationObject.style).map(([timestamp, style]) => {
+    const step = timestamp === 'from' ? 0 : timestamp === 'to' ? 100 : Number.parseFloat(timestamp);
+    return [step, style];
+  }).sort((a, b) => a[0] - b[0]);
+  for (let i = 0; i < steps.length; i++) {
+    const [step, style] = steps[i];
     keyframe += `${step}% { `;
+
+    const easing = steps[i + 1]?.[1]?.easing;
+    if (easing) {
+      let easingName = 'linear';
+      if (easing in WebEasings) {
+        easingName = easing;
+      } else if (easing.name in WebEasings) {
+        easingName = easing.name;
+      }
+      keyframe += `animation-timing-function: cubic-bezier(${WebEasings[easingName].toString()});`;
+    }
+
     for (const [property, values] of Object.entries(style)) {
       if (property === 'easing') {
-        let easingName = 'linear';
-        if (values in WebEasings) {
-          easingName = values;
-        } else if (values.name in WebEasings) {
-          easingName = values.name;
-        }
-        keyframe += `animation-timing-function: cubic-bezier(${WebEasings[easingName].toString()});`;
         continue;
       }
       if (property === 'originX') {
