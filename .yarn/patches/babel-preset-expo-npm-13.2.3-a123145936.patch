diff --git a/build/inline-env-vars.js b/build/inline-env-vars.js
index caf3e9bf2bd3f6c7d3d0bb903bd2be1eff8cf242..0d2865fde89b0e3001ba72e92614e30a1eb2ffdc 100644
--- a/build/inline-env-vars.js
+++ b/build/inline-env-vars.js
@@ -3,9 +3,11 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.expoInlineEnvVars = expoInlineEnvVars;
 const core_1 = require("@babel/core");
 const common_1 = require("./common");
+const getenv_1 = require("getenv");
 const debug = require('debug')('expo:babel:env-vars');
 function expoInlineEnvVars(api) {
     const isProduction = api.caller(common_1.getIsProd);
+    const strictEnvVars = (0, getenv_1.boolish)('PYLY_STRICT_EXPO_ENV_VARS', false);
     function isFirstInAssign(path) {
         return core_1.types.isAssignmentExpression(path.parent) && path.parent.left === path.node;
     }
@@ -30,6 +32,9 @@ function expoInlineEnvVars(api) {
                         key.value.startsWith('EXPO_PUBLIC_')) {
                         const envVar = key.value;
                         debug(`${isProduction ? 'Inlining' : 'Referencing'} environment variable in %s: %s`, filename, envVar);
+                        if (strictEnvVars && !(key.value in process.env)) {
+                            throw new Error(`Missing environment variable ${key.value} for ${filename}`);
+                        }
                         publicEnvVars.add(envVar);
                         if (isProduction) {
                             path.replaceWith(core_1.types.valueToNode(process.env[envVar]));
diff --git a/build/index.js b/build/index.js
index 37c6dda034d8bfe3ea2338ba539119c214bfa8e7..eb2594c0b6090ed9d025c4e26db86759e4f508db 100644
--- a/build/index.js
+++ b/build/index.js
@@ -280,7 +280,7 @@ function babelPresetExpo(api, options = {}) {
             // Automatically add `react-native-reanimated/plugin` when the package is installed.
             // TODO: Move to be a customTransformOption.
             (0, common_1.hasModule)('react-native-reanimated') &&
-                platformOptions.reanimated !== false && [require('react-native-reanimated/plugin')],
+                platformOptions.reanimated !== false && [require('react-native-worklets/plugin')],
         ].filter(Boolean),
     };
 }
