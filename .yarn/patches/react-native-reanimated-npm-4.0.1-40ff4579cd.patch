diff --git a/lib/module/createAnimatedComponent/AnimatedComponent.js b/lib/module/createAnimatedComponent/AnimatedComponent.js
index c45fa097bc107ce589b535ff3f3a507fcc30d121..d760a7fa092388a797869faaa06b08402d287774 100644
--- a/lib/module/createAnimatedComponent/AnimatedComponent.js
+++ b/lib/module/createAnimatedComponent/AnimatedComponent.js
@@ -64,6 +64,16 @@ export default class AnimatedComponent extends ReanimatedAnimatedComponent {
     }
     this._configureLayoutAnimation(LayoutAnimationType.LAYOUT, this.props.layout);
     this._configureLayoutAnimation(LayoutAnimationType.EXITING, this.props.exiting);
+    {
+      // In the case where the component was unmounted and had an exit animation,
+      // move back the elements that were moved into the dummy element.
+      const dummyRef = this._componentDOMRef.reanimatedDummyRef;
+      dummyRef?.getAnimations().forEach(x => x.cancel());
+      while (dummyRef?.firstChild) {
+        this._componentDOMRef.appendChild(dummyRef.firstChild);
+      }
+      this._componentDOMRef.reanimatedDummyRef = null;
+    }
     if (IS_WEB) {
       if (this.props.exiting && this._componentDOMRef) {
         saveSnapshot(this._componentDOMRef);
diff --git a/lib/module/layoutReanimation/web/componentUtils.js b/lib/module/layoutReanimation/web/componentUtils.js
index 558d20f1721d3ee84e61ea6abb98b611bbce1520..7b9b1632b63eb2e367cdbaa87e47e93253a67096 100644
--- a/lib/module/layoutReanimation/web/componentUtils.js
+++ b/lib/module/layoutReanimation/web/componentUtils.js
@@ -150,7 +150,10 @@ export function setElementAnimation(element, animationConfig, shouldSavePosition
   if (!(animationName in Animations)) {
     scheduleAnimationCleanup(animationName, duration + delay, () => {
       if (shouldSavePosition) {
-        setElementPosition(element, snapshots.get(element));
+        const snapshot = snapshots.get(element);
+        if (snapshot) {
+          setElementPosition(element, snapshot);
+        }
       }
     });
   }
@@ -219,6 +222,7 @@ export function handleExitingAnimation(element, animationConfig) {
   const parent = element.offsetParent;
   const dummy = element.cloneNode();
   dummy.reanimatedDummy = true;
+  element.reanimatedDummyRef = dummy;
   element.style.animationName = '';
   dummy.style.animationName = '';

diff --git a/lib/module/layoutReanimation/web/animationParser.js b/lib/module/layoutReanimation/web/animationParser.js
index 6b34c1ebdd35dbb88e1d5374daeb5ff27f6e4976..4277e04bcf4ce2c49229f7dc878e1a0292b40cd8 100644
--- a/lib/module/layoutReanimation/web/animationParser.js
+++ b/lib/module/layoutReanimation/web/animationParser.js
@@ -3,18 +3,27 @@
 import { WebEasings } from "./Easing.web.js";
 export function convertAnimationObjectToKeyframes(animationObject) {
   let keyframe = `@keyframes ${animationObject.name} { `;
-  for (const [timestamp, style] of Object.entries(animationObject.style)) {
-    const step = timestamp === 'from' ? 0 : timestamp === 'to' ? 100 : timestamp;
+  const steps = Object.entries(animationObject.style).map(([timestamp, style]) => {
+    const step = timestamp === 'from' ? 0 : timestamp === 'to' ? 100 : Number.parseFloat(timestamp);
+    return [step, style];
+  }).sort((a, b) => a[0] - b[0]);
+  for (let i = 0; i < steps.length; i++) {
+    const [step, style] = steps[i];
     keyframe += `${step}% { `;
+
+    const easing = steps[i + 1]?.[1]?.easing;
+    if (easing) {
+      let easingName = 'linear';
+      if (easing in WebEasings) {
+        easingName = easing;
+      } else if (easing.name in WebEasings) {
+        easingName = easing.name;
+      }
+      keyframe += `animation-timing-function: cubic-bezier(${WebEasings[easingName].toString()});`;
+    }
+
     for (const [property, values] of Object.entries(style)) {
       if (property === 'easing') {
-        let easingName = 'linear';
-        if (values in WebEasings) {
-          easingName = values;
-        } else if (values.name in WebEasings) {
-          easingName = values.name;
-        }
-        keyframe += `animation-timing-function: cubic-bezier(${WebEasings[easingName].toString()});`;
         continue;
       }
       if (property === 'originX') {
