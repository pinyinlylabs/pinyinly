// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"🗣️ Pronunciation of 媒 (méi)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" méi"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Second tone"}</_components.strong>{" — "}<_components.strong>{"rising"}</_components.strong>{" tone, like asking a question: "}<_components.strong>{"\"Really?\""}</_components.strong></_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🔤 Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"m"}</_components.strong>{" like "}<_components.strong>{"\"m\""}</_components.strong>{" in \"me\""}</_components.li>{"\n"}<_components.li><_components.strong>{"éi"}</_components.strong>{" sounds like "}<_components.strong>{"\"ay\""}</_components.strong>{" in \"way\" but with a rising tone"}</_components.li>{"\n"}<_components.li><_components.strong>{"méi"}</_components.strong>{" sounds like "}<_components.strong>{"\"may?\""}</_components.strong>{" with a questioning rise"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎧 Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"second tone"}</_components.strong>{" (ˊ) is "}<_components.strong>{"rising like a question"}</_components.strong>{":"}</_components.p>{"\n"}<_components.p>{"Start "}<_components.strong>{"low and rise up"}</_components.strong>{" — like asking if someone might serve as a matchmaker: "}<_components.strong>{"\"méi?\""}</_components.strong>{" — that's\nthe questioning second tone."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Common Examples:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"媒 (méi) - \"matchmaker; go-between\""}</_components.li>{"\n"}<_components.li>{"媒体 (méi tǐ) - \"media\""}</_components.li>{"\n"}<_components.li>{"媒人 (méi rén) - \"matchmaker\""}</_components.li>{"\n"}<_components.li>{"媒婆 (méi pó) - \"matchmaker\" (female)"}</_components.li>{"\n"}<_components.li>{"传媒 (chuán méi) - \"media; mass media\""}</_components.li>{"\n"}<_components.li>{"做媒 (zuò méi) - \"to act as matchmaker\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"💡 Memory Tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The second tone's rising pattern is like asking "}<_components.strong>{"\"May I introduce you two?\""}</_components.strong>{" — that's what a\n"}<_components.strong>{"matchmaker"}</_components.strong>{" does with a questioning, hopeful tone!"}</_components.p></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
