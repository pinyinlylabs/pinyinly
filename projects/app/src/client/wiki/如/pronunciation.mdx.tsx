// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"🗣️ Pronunciation of 如 (rú)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" rú"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Second tone"}</_components.strong>{" — "}<_components.strong>{"rising"}</_components.strong>{" tone, like asking a question"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🔤 Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"r"}</_components.strong>{" like "}<_components.strong>{"\"r\""}</_components.strong>{" in \"run\" (but softer, almost like \"zh\")"}</_components.li>{"\n"}<_components.li><_components.strong>{"ú"}</_components.strong>{" sounds like "}<_components.strong>{"\"oo\""}</_components.strong>{" in \"moon\", but with second tone → rising pitch"}</_components.li>{"\n"}<_components.li><_components.strong>{"rú"}</_components.strong>{" sounds like "}<_components.strong>{"\"roo?\""}</_components.strong>{" with a questioning rise"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎧 Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"second tone"}</_components.strong>{" (´) is a "}<_components.strong>{"rising"}</_components.strong>{" tone:"}</_components.p>{"\n"}<_components.p>{"Say it like you're asking \"How about?\": "}<_components.strong>{"\"rú?\""}</_components.strong>{" — that's the upward questioning tone of the\n"}<_components.strong>{"second tone"}</_components.strong>{"."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Common Examples:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"如 (rú) - \"be like, as, if\" (usually in compounds)"}</_components.li>{"\n"}<_components.li>{"如果 (rú guǒ) - \"if\""}</_components.li>{"\n"}<_components.li>{"如何 (rú hé) - \"how, what about\""}</_components.li>{"\n"}<_components.li>{"比如 (bǐ rú) - \"for example\""}</_components.li>{"\n"}<_components.li>{"如此 (rú cǐ) - \"like this, so\""}</_components.li>{"\n"}<_components.li>{"例如 (lì rú) - \"for example\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"💡 Special Notes:"}</_components.strong></_components.p>{"\n"}<_components.p>{"如 is rarely used alone in modern Chinese but is extremely important in compound words. It functions\nto make comparisons, introduce conditions, or indicate similarity. It's essential for expressing\n\"if,\" \"how,\" and \"for example.\""}</_components.p>{"\n"}<_components.p><_components.strong>{"📍 Usage Patterns:"}</_components.strong></_components.p>{"\n"}<_components.p>{"如 typically appears in:"}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"Conditional phrases: 如果 (if)"}</_components.li>{"\n"}<_components.li>{"Questions: 如何 (how)"}</_components.li>{"\n"}<_components.li>{"Examples: 比如, 例如 (for example)"}</_components.li>{"\n"}<_components.li>{"Comparisons: expressing similarity or likeness"}</_components.li>{"\n"}</_components.ul></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
