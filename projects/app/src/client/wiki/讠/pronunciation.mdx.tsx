// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"🗣️ Pronunciation of 讠 (yán)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" yán"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Second tone"}</_components.strong>{" — "}<_components.strong>{"rising"}</_components.strong>{" tone, like asking a question"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🔤 Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"y"}</_components.strong>{" like "}<_components.strong>{"\"y\""}</_components.strong>{" in \"yes\""}</_components.li>{"\n"}<_components.li><_components.strong>{"án"}</_components.strong>{" sounds like "}<_components.strong>{"\"ahn\""}</_components.strong>{" but with second tone → rising up"}</_components.li>{"\n"}<_components.li><_components.strong>{"yán"}</_components.strong>{" sounds like "}<_components.strong>{"\"yahn\""}</_components.strong>{" with a questioning rise"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎧 Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"second tone"}</_components.strong>{" (´) is a "}<_components.strong>{"rising"}</_components.strong>{" tone:"}</_components.p>{"\n"}<_components.p>{"Say it like you're about to speak: "}<_components.strong>{"\"yán?\""}</_components.strong>{" — that upward rise shows the anticipation of speech."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Special Note:"}</_components.strong></_components.p>{"\n"}<_components.p>{"讠 is the "}<_components.strong>{"radical form"}</_components.strong>{" of 言 (speech). It appears as a component on the left side of many\ncharacters related to speaking, talking, or language. When used independently, it has the same\npronunciation as 言."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Common Examples in Characters:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"说 (shuō) - \"speak\" (with 讠 radical)"}</_components.li>{"\n"}<_components.li>{"话 (huà) - \"words; speech\" (with 讠 radical)"}</_components.li>{"\n"}<_components.li>{"语 (yǔ) - \"language\" (with 讠 radical)"}</_components.li>{"\n"}<_components.li>{"词 (cí) - \"word\" (with 讠 radical)"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"💡 Memory Tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"Think of 讠 as the \"speech radical\" — it's the streamlined form of 言 that helps create words about\ncommunication, maintaining the same rising tone that suggests speaking up!"}</_components.p></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
