// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p>{"Material made from animal skin; leather; hide; to reform or revolutionize."}</_components.p>{"\n"}<_components.h2>{"Quick Reference"}</_components.h2>{"\n"}<_components.table><_components.thead><_components.tr><_components.th>{"Aspect"}</_components.th><_components.th>{"Info"}</_components.th></_components.tr></_components.thead><_components.tbody><_components.tr><_components.td>{"Pinyin"}</_components.td><_components.td>{"gé"}</_components.td></_components.tr><_components.tr><_components.td>{"Core meaning"}</_components.td><_components.td>{"leather; reform; change"}</_components.td></_components.tr><_components.tr><_components.td>{"Part of speech"}</_components.td><_components.td>{"noun, verb"}</_components.td></_components.tr><_components.tr><_components.td>{"Tone"}</_components.td><_components.td>{"second tone (rising)"}</_components.td></_components.tr></_components.tbody></_components.table>{"\n"}<_components.h2>{"Visual Breakdown"}</_components.h2>{"\n"}<_components.p>{"革 is a pictograph representing "}<_components.strong>{"treated animal hide"}</_components.strong>{"."}</_components.p>{"\n"}<_components.table><_components.thead><_components.tr><_components.th>{"Component"}</_components.th><_components.th>{"Visual Description"}</_components.th></_components.tr></_components.thead><_components.tbody><_components.tr><_components.td><_components.strong>{"革"}</_components.strong></_components.td><_components.td>{"Originally showed stretched animal skin with texture markings"}</_components.td></_components.tr></_components.tbody></_components.table>{"\n"}<_components.h2>{"Mnemonic"}</_components.h2>{"\n"}<_components.p>{"Think of 革 as "}<_components.strong>{"animal skin being processed and transformed"}</_components.strong>{":"}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"The character originally depicted animal hide stretched for tanning"}</_components.li>{"\n"}<_components.li>{"Shows the transformation from raw skin to useful leather"}</_components.li>{"\n"}<_components.li>{"Like the process of taking something rough and making it smooth and useful"}</_components.li>{"\n"}<_components.li>{"This transformation concept extends to meaning \"reform\" or \"revolutionize\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.h2>{"Dual Meanings"}</_components.h2>{"\n"}<_components.p><_components.strong>{"As \"leather\":"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"皮革"}</_components.strong>{" (pí gé) - \"leather; hide\""}</_components.li>{"\n"}<_components.li><_components.strong>{"革制品"}</_components.strong>{" (gé zhì pǐn) - \"leather goods\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"As \"reform/revolutionize\":"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"改革"}</_components.strong>{" (gǎi gé) - \"reform; transformation\""}</_components.li>{"\n"}<_components.li><_components.strong>{"革命"}</_components.strong>{" (gé mìng) - \"revolution\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.h2>{"Cultural Context"}</_components.h2>{"\n"}<_components.p>{"革 connects physical and social transformation:"}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"The leather-making process symbolizes improvement and refinement"}</_components.li>{"\n"}<_components.li>{"Extended metaphorically to mean political and social reform"}</_components.li>{"\n"}<_components.li>{"Reflects the Chinese concept that change requires careful process and skill"}</_components.li>{"\n"}<_components.li>{"Important in both traditional crafts and modern political discourse"}</_components.li>{"\n"}</_components.ul></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
