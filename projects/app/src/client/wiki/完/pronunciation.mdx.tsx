// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"🗣️ Pronunciation of 完 (wán)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" wán"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Second tone"}</_components.strong>{" — "}<_components.strong>{"rising"}</_components.strong>{" tone, like asking a question"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🔤 Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"w"}</_components.strong>{" like "}<_components.strong>{"\"w\""}</_components.strong>{" in \"wan\""}</_components.li>{"\n"}<_components.li><_components.strong>{"án"}</_components.strong>{" sounds like "}<_components.strong>{"\"ahn\""}</_components.strong>{" but with second tone → rising upward"}</_components.li>{"\n"}<_components.li><_components.strong>{"wán"}</_components.strong>{" sounds like "}<_components.strong>{"\"wahn?\""}</_components.strong>{" with a questioning rise"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎧 Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"second tone"}</_components.strong>{" (ˊ) is a "}<_components.strong>{"rising"}</_components.strong>{" tone:"}</_components.p>{"\n"}<_components.p>{"Say it like you're asking \"finished?\" with anticipation: "}<_components.strong>{"\"wán?\""}</_components.strong>{" — that's the rising tone pattern\nof "}<_components.strong>{"wán"}</_components.strong>{"."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Common Examples:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"完 (wán) - \"to finish; complete\""}</_components.li>{"\n"}<_components.li>{"完成 (wán chéng) - \"to complete; accomplish\""}</_components.li>{"\n"}<_components.li>{"完全 (wán quán) - \"completely; entirely\""}</_components.li>{"\n"}<_components.li>{"完整 (wán zhěng) - \"complete; intact\""}</_components.li>{"\n"}<_components.li>{"完美 (wán měi) - \"perfect; flawless\""}</_components.li>{"\n"}<_components.li>{"完善 (wán shàn) - \"to perfect; improve\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"📍 Usage Note:"}</_components.strong></_components.p>{"\n"}<_components.p>{"完 often appears in compound words related to completion and perfection. It can function as both a\nverb (\"to finish\") and as part of adverbs (\"completely\")."}</_components.p>{"\n"}<_components.p><_components.strong>{"💡 Memory Tip:"}</_components.strong></_components.p>{"\n"}<_components.p><_components.strong>{"Finish"}</_components.strong>{" — the rising second tone is like the satisfaction rising when you "}<_components.strong>{"complete"}</_components.strong>{" something!"}</_components.p></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
