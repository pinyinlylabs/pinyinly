// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"üó£Ô∏è Pronunciation of È°∫ (sh√πn)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" sh√πn"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Fourth tone"}</_components.strong>{" ‚Äî sharp "}<_components.strong>{"falling"}</_components.strong>{" tone, like giving a command"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"üî§ Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"sh"}</_components.strong>{" like "}<_components.strong>{"\"sh\""}</_components.strong>{" in \"ship\""}</_components.li>{"\n"}<_components.li><_components.strong>{"√πn"}</_components.strong>{" sounds like "}<_components.strong>{"\"oon\""}</_components.strong>{" in \"moon\" but with sharp falling tone"}</_components.li>{"\n"}<_components.li><_components.strong>{"sh√πn"}</_components.strong>{" sounds like "}<_components.strong>{"\"shoon!\""}</_components.strong>{" with a sharp drop"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"üéß Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"fourth tone"}</_components.strong>{" (Àã) is a "}<_components.strong>{"sharp falling"}</_components.strong>{" tone. Say "}<_components.strong>{"\"sh√πn\""}</_components.strong>{" like you're giving a firm\ncommand to obey: \""}<_components.strong>{"Obey"}</_components.strong>{"!\""}</_components.p>{"\n"}<_components.p><_components.strong>{"üìù Common Examples:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"È°∫ (sh√πn) - \"obey/smooth\""}</_components.li>{"\n"}<_components.li>{"È°∫Âà© (sh√πn l√¨) - \"smooth/successful\""}</_components.li>{"\n"}<_components.li>{"È°∫Â∫è (sh√πn x√π) - \"sequence/order\""}</_components.li>{"\n"}<_components.li>{"È°∫‰æø (sh√πn bi√†n) - \"by the way\""}</_components.li>{"\n"}<_components.li>{"È°∫‰ªé (sh√πn c√≥ng) - \"obedient\""}</_components.li>{"\n"}<_components.li>{"‰∏ÄË∑ØÈ°∫È£é (y√≠ l√π sh√πn fƒìng) - \"bon voyage\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"üí° Memory Tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"When you order someone to "}<_components.strong>{"obey"}</_components.strong>{", you use a commanding, falling tone ‚Äî that's the fourth tone of\n"}<_components.strong>{"sh√πn"}</_components.strong>{"!"}</_components.p></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
