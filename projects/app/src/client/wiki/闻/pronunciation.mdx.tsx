// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"🗣️ Pronunciation of 闻 (wén)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" wén"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Second tone"}</_components.strong>{" — "}<_components.strong>{"rising"}</_components.strong>{" tone, like asking a question"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🔤 Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"w"}</_components.strong>{" like "}<_components.strong>{"\"w\""}</_components.strong>{" in \"way\""}</_components.li>{"\n"}<_components.li><_components.strong>{"én"}</_components.strong>{" sounds like "}<_components.strong>{"\"en\""}</_components.strong>{" in \"pen\" but with a rising tone"}</_components.li>{"\n"}<_components.li><_components.strong>{"wén"}</_components.strong>{" sounds like "}<_components.strong>{"\"when\""}</_components.strong>{" with a questioning rise"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎧 Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"second tone"}</_components.strong>{" (ˊ) is a "}<_components.strong>{"rising"}</_components.strong>{" tone:"}</_components.p>{"\n"}<_components.p>{"Start low and rise up: "}<_components.strong>{"\"wén?\""}</_components.strong>{" — like asking \"Smell?\" when you detect something."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Common Examples:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"闻 (wén) - \"smell, hear, news\""}</_components.li>{"\n"}<_components.li>{"新闻 (xīn wén) - \"news\""}</_components.li>{"\n"}<_components.li>{"闻到 (wén dào) - \"smell (something)\""}</_components.li>{"\n"}<_components.li>{"听闻 (tīng wén) - \"hear (news/information)\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"📝 Special Notes:"}</_components.strong></_components.p>{"\n"}<_components.p>{"闻 has multiple related meanings:"}</_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"To smell"}</_components.strong>{" (detect odors)"}</_components.li>{"\n"}<_components.li><_components.strong>{"To hear"}</_components.strong>{" (receive information)"}</_components.li>{"\n"}<_components.li><_components.strong>{"News"}</_components.strong>{" (information heard/received)"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p>{"The character contains the door radical 门, suggesting that news and smells both \"come through\" to\nus."}</_components.p>{"\n"}<_components.p><_components.strong>{"💡 Memory Tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"When you "}<_components.strong>{"smell"}</_components.strong>{" something or hear "}<_components.strong>{"news"}</_components.strong>{", you might react with a rising \"Wén?\" of curiosity!"}</_components.p></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
