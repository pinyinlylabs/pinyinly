// @ts-nocheck
/*@jsxRuntime automatic*/
/*@jsxImportSource react*/
import {useMDXComponents as _provideComponents} from "@/client/hooks/useMDXComponents";
function _createMdxContent(props: any) {
  const _components = Object.assign(Object.create(_provideComponents()), props.components);
  return <><_components.p><_components.strong>{"🗣️ Pronunciation of 层 (céng)"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"Pinyin:"}</_components.strong>{" céng"}</_components.li>{"\n"}<_components.li><_components.strong>{"Tone: Second tone"}</_components.strong>{" — "}<_components.strong>{"rising"}</_components.strong>{" tone, like asking \"What level?\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🔤 Breakdown:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li><_components.strong>{"c"}</_components.strong>{" like "}<_components.strong>{"\"ts\""}</_components.strong>{" in \"cats\" — a sharp \"ts\" sound at the beginning"}</_components.li>{"\n"}<_components.li><_components.strong>{"éng"}</_components.strong>{" sounds like "}<_components.strong>{"\"ung\""}</_components.strong>{" with rising tone, similar to the ending of \"sung\""}</_components.li>{"\n"}<_components.li><_components.strong>{"céng"}</_components.strong>{" sounds like "}<_components.strong>{"\"tsung\""}</_components.strong>{" with a questioning rise"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎯 Mastering the Chinese \"c\" sound:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"c"}</_components.strong>{" in Chinese is "}<_components.strong>{"very different"}</_components.strong>{" from English:"}</_components.p>{"\n"}<_components.ol>{"\n"}<_components.li><_components.strong>{"Not like \"c\" in \"cat\""}</_components.strong>{" — it's more like \"ts\""}</_components.li>{"\n"}<_components.li><_components.strong>{"Sharp and crisp"}</_components.strong>{" — like the \"ts\" at the end of \"cats\""}</_components.li>{"\n"}<_components.li><_components.strong>{"Unaspirated"}</_components.strong>{" — no puff of air like English \"ch\""}</_components.li>{"\n"}<_components.li><_components.strong>{"Think \"tsunami\""}</_components.strong>{" — but just the \"ts\" part"}</_components.li>{"\n"}</_components.ol>{"\n"}<_components.p><_components.strong>{"🎯 Mastering the \"éng\" final:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"éng"}</_components.strong>{" ending is "}<_components.strong>{"nasalized"}</_components.strong>{":"}</_components.p>{"\n"}<_components.ol>{"\n"}<_components.li><_components.strong>{"Start with \"uh\""}</_components.strong>{" — like in \"huh\""}</_components.li>{"\n"}<_components.li><_components.strong>{"Add \"ng\""}</_components.strong>{" — like at the end of \"sing\""}</_components.li>{"\n"}<_components.li><_components.strong>{"Back of tongue touches soft palate"}</_components.strong>{" — creates the \"ng\" sound"}</_components.li>{"\n"}<_components.li><_components.strong>{"Let it resonate"}</_components.strong>{" — nasal quality"}</_components.li>{"\n"}</_components.ol>{"\n"}<_components.p><_components.strong>{"Common mistakes:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"❌ \"seng\" (using \"s\" instead of \"ts\") — too soft"}</_components.li>{"\n"}<_components.li>{"❌ \"cheng\" (using \"ch\") — too aspirated"}</_components.li>{"\n"}<_components.li>{"❌ \"tsay\" (missing the nasal \"ng\") — needs the back-of-tongue closure"}</_components.li>{"\n"}<_components.li>{"✅ \"céng\" — sharp \"ts\" + nasal \"eng\" + rising tone"}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"🎧 Tone tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"The "}<_components.strong>{"second tone"}</_components.strong>{" (ˊ) is "}<_components.strong>{"rising like a question"}</_components.strong>{":"}</_components.p>{"\n"}<_components.p>{"Start "}<_components.strong>{"low and rise up"}</_components.strong>{" — like asking \"Which floor?\" when looking at building levels."}</_components.p>{"\n"}<_components.p><_components.strong>{"📝 Common Examples:"}</_components.strong></_components.p>{"\n"}<_components.ul>{"\n"}<_components.li>{"层 (céng) - \"layer; floor; level\""}</_components.li>{"\n"}<_components.li>{"楼层 (lóu céng) - \"floor (of a building)\""}</_components.li>{"\n"}<_components.li>{"层次 (céng cì) - \"level; hierarchy\""}</_components.li>{"\n"}<_components.li>{"一层 (yī céng) - \"first floor\""}</_components.li>{"\n"}</_components.ul>{"\n"}<_components.p><_components.strong>{"💡 Memory Tip:"}</_components.strong></_components.p>{"\n"}<_components.p>{"Think of counting floors in a building with a questioning tone: \"Which 层?\" — the rising tone\nsuggests looking up at different levels!"}</_components.p></>;
}
export default function MDXContent(props: any = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}
