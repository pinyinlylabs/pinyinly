fileGroups:
  sentryCliEnv:
    - $SENTRY_*
  expoCliEnv:
    - "$EXPO_*"
  # WARNING: these must end in trialing slash to be rsync
  buildVercelExpoOutdir:
    - dist/.cache/vercel-expo/
  buildVercelExpoSentryOutdir:
    - dist/.cache/vercel-expo-sentry/
  buildVercelOutdir:
    - dist/vercel/
  buildEasUpdateOutdir:
    - dist/eas/

toolchain:
  default: "node"

workspace:
  inheritedTasks:
    rename:
      deploy: "deployVercelVercel"

tasks:
  build:
    deps:
      - buildEasUpdate
      - buildVercel
    options:
      runInCI: false

  buildEasUpdate:
    # Do iOS and Android separately to avoid IO contention and maybe allow metro bundler cache re-use.
    script: |
      expo export -p ios --source-maps --output-dir @group(buildEasUpdateOutdir)
      expo export -p android --source-maps --output-dir @group(buildEasUpdateOutdir)
    deps:
      - ~:codegen
    env:
      NODE_OPTIONS: --import tsx $NODE_OPTIONS
    options:
      envFile: .env.local
      mutex: expo-export # reduce IO contention
    outputs:
      - "@group(buildEasUpdateOutdir)"
    toolchain: "node"

  buildVercel:
    # Copy to final destination.
    command: rsync -a --delete @group(buildVercelExpoSentryOutdir) @group(buildVercelOutdir)
    deps:
      - buildVercelExpoSentry
    outputs:
      - "@group(buildVercelOutdir)"

  buildVercelExpo:
    script: |
      mkdir -p @group(buildVercelExpoOutdir) &&
      rm -rf @group(buildVercelExpoOutdir) &&
      yarn expo export -p web --source-maps --output-dir @group(buildVercelExpoOutdir)
    deps:
      - ~:codegen
    inputs:
      - "@group(expoCliEnv)"
      - "*.*"
      - "{api,assets,public,src}/**/*"
    options:
      envFile: .env.local
      internal: true
      mutex: expo-export # reduce IO contention
    outputs:
      - "@group(buildVercelExpoOutdir)"
    env:
      NODE_OPTIONS: --import tsx $NODE_OPTIONS

  buildVercelExpoSentry:
    script: |
      rsync -a --delete @group(buildVercelExpoOutdir) @group(buildVercelExpoSentryOutdir) &&
      npx -y @sentry/cli@2.53.0 sourcemaps inject @group(buildVercelExpoSentryOutdir)
    deps:
      - buildVercelExpo
    inputs:
      - "@group(sentryCliEnv)"
    options:
      internal: true
    outputs:
      - "@group(buildVercelExpoSentryOutdir)"

  buildBillOfMaterials:
    script: |
      yarn expo export &&
      tsx --tsconfig tsconfig.node.json ./bin/buildBillOfMaterials.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  codegen:
    deps:
      - ~:codegenEslint
      - ~:codegenExpoRouterTypes

  codegenEslint:
    description: "Run ESLint with codegen rules. This is separate from lint and doesn't use ESLint caching intentionally."
    script: |
      [ -n "${CI:-}" ] && {
        echo -e "\033[33m⚠️  CI environment detected, skipping execution.\033[0m"
        exit 0
      }

      eslint . --config eslint-codegen.config.mjs --fix
    inputs:
      # Config files anywhere within the project
      - "**/*.{cjs,js,mjs,json,ts,tsx}"
      - "*.{cjs,js,mjs,json,ts,tsx}"
      # Environment variables
      - "$DEBUG"
      - "$ESLINT_*"
      - "$TIMING"
    deps:
      - eslint-rules:src
    env:
      NODE_OPTIONS: --import tsx $NODE_OPTIONS
    toolchain: "node"

  codegenExpoRouterTypes:
    # The recommended command from https://docs.expo.dev/router/reference/typed-routes/#type-generation
    command: yarn expo customize tsconfig.json
    inputs:
      - "@group(expoCliEnv)"
      - "*.*"
      - "{public,src/app}/**/*"
    env:
      # Fixes: (node:97180) Warning: To load an ES module, set "type": "module"
      # in the package.json or use the .mjs extension.
      #
      # Pass $NODE_OPTIONS to support VS Code "JavaScript Debug Terminal".
      NODE_OPTIONS: --import tsx $NODE_OPTIONS

  dbCheck:
    command: drizzle-kit check
    description: |
      Check the database schema for consistency, also makes sure the version of
      `drizzle-kit` and `drizzle-orm` are compatible.

  dbGenerate:
    command: drizzle-kit generate
    preset: watcher

  dbMigrate:
    command: tsx --tsconfig tsconfig.node.json ./bin/dbMigrate.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  deploy:
    deps:
      - deployEasUpdate
      - deployVercel
    options:
      runInCI: false

  deployEasUpdate:
    deps:
      - deployEasUpdateEas
      - deployEasUpdateSentry
    options:
      persistent: false
      runInCI: false

  deployEasUpdateEas:
    command: npx -y eas-cli@16.18.1 update --skip-bundler --input-dir @group(buildEasUpdateOutdir) --auto --non-interactive
    deps:
      - buildEasUpdate
    options:
      persistent: false
      runInCI: false

  deployEasUpdateSentry:
    command: npx -y sentry-expo-upload-sourcemaps @group(buildEasUpdateOutdir)
    deps:
      - buildEasUpdate
    options:
      persistent: false
      runInCI: false

  deployVercel:
    deps:
      - deployVercelVercel
      - deployVercelSentry
    options:
      persistent: false
      runInCI: false

  deployVercelVercel:
    deps:
      - buildVercel

  deployVercelSentry:
    command: npx -y @sentry/cli@2.53.0 sourcemaps upload -o pinyinly -p app @group(buildVercelOutdir)
    deps:
      - buildVercel
    options:
      persistent: false
      runInCI: false

  dev:
    command: yarn expo start
    preset: watcher
    env:
      # Fixes: (node:97180) Warning: To load an ES module, set "type": "module"
      # in the package.json or use the .mjs extension.
      #
      # Pass $NODE_OPTIONS to support VS Code "JavaScript Debug Terminal".
      NODE_OPTIONS: --import tsx $NODE_OPTIONS

  devInngest:
    command: npx -y inngest-cli@1.11.10 dev
    preset: watcher

  formatAssetJson:
    command: tsx --tsconfig tsconfig.node.json ./bin/formatAssetJson.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateHanziDecomposition:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateHanziDecomposition.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateMissingFontGlyphs:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateMissingFontGlyphs.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateMnemonicTheme:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateMnemonicTheme.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateRadicalNameMnemonics:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateRadicalNameMnemonics.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateRadicalPinyinMnemonics:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateRadicalPinyinMnemonics.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateWordDictionary:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateWordDictionary.tsx
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  generateWikiSpeech:
    command: tsx --tsconfig tsconfig.node.json ./bin/generateWikiSpeech.ts
    preset: watcher
    options:
      envFile: .env.local
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS

  expoDoctor:
    command: npx -y expo-doctor@1.15.1
    deps:
      - ~:codegen
    env:
      # Don't check that all the expo-* packages are the latest versions. That's
      # already handled by renovate in a way that doesn't break PR builds when a
      # new version comes out.
      EXPO_OFFLINE: "1"
    options:
      # This checks the latest version of dependencies from the internet, so it
      # can't cache purely off local filesystem. It's important cache is
      # disabled otherwise the daily CI won't run this.
      cache: false

  test:
    deps:
      - ~:codegen
    env:
      NODE_OPTIONS: --experimental-sqlite $NODE_OPTIONS
    options:
      envFile: .env.local

  typecheck:
    deps:
      - ~:codegen

  lint:
    deps:
      # Lint does type-checking, so the Expo router types need to be generated first.
      - ~:codegen

tags:
  - eslint
  - prettier
  - typescript
  - vercel
  - vitest
  - vitest-bench

dependsOn:
  - audio-sprites
  - eslint-rules
  - lib
  - mdx
